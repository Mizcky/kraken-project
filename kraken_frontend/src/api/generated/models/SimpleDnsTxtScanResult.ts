/* tslint:disable */
/* eslint-disable */
/**
 * kraken
 * The core component of kraken-project
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A simple representation of a dns txt scan result
 * @export
 * @interface SimpleDnsTxtScanResult
 */
export interface SimpleDnsTxtScanResult {
    /**
     * The primary key
     * @type {string}
     * @memberof SimpleDnsTxtScanResult
     */
    uuid: string;
    /**
     * The attack which produced this result
     * @type {string}
     * @memberof SimpleDnsTxtScanResult
     */
    attack: string;
    /**
     * The point in time, this result was produced
     * @type {Date}
     * @memberof SimpleDnsTxtScanResult
     */
    createdAt: Date;
    /**
     * The source address
     * @type {string}
     * @memberof SimpleDnsTxtScanResult
     */
    domain: string;
    /**
     * The rule that was matched for this scan result, e.g. a single SPF part
     * or even the whole TXT record.
     * @type {string}
     * @memberof SimpleDnsTxtScanResult
     */
    rule: string;
    /**
     * The type of DNS TXT scan result
     * @type {string}
     * @memberof SimpleDnsTxtScanResult
     */
    txtType: SimpleDnsTxtScanResultTxtTypeEnum;
    /**
     * If the txt_type is a SPF type that includes an IP (or whole IP range), it will be set here.
     * @type {string}
     * @memberof SimpleDnsTxtScanResult
     */
    spfIp: string;
    /**
     * If the txt_type is a SPF type that includes a domain, it will be set here.
     * @type {string}
     * @memberof SimpleDnsTxtScanResult
     */
    spfDomain?: string | null;
    /**
     * If the txt_type is a SPF type that includes a domain, this is its ipv4 CIDR.
     * @type {number}
     * @memberof SimpleDnsTxtScanResult
     */
    spfDomainIpv4Cidr?: number | null;
    /**
     * If the txt_type is a SPF type that includes a domain, this is its ipv6 CIDR.
     * @type {number}
     * @memberof SimpleDnsTxtScanResult
     */
    spfDomainIpv6Cidr?: number | null;
}


/**
 * @export
 */
export const SimpleDnsTxtScanResultTxtTypeEnum = {
    HasGoogleAccount: 'HasGoogleAccount',
    HasGlobalsignAccount: 'HasGlobalsignAccount',
    HasGlobalsignSMime: 'HasGlobalsignSMime',
    HasDocusignAccount: 'HasDocusignAccount',
    HasAppleAccount: 'HasAppleAccount',
    HasFacebookAccount: 'HasFacebookAccount',
    HasHubspotAccount: 'HasHubspotAccount',
    HasMsDynamics365: 'HasMSDynamics365',
    HasStripeAccount: 'HasStripeAccount',
    HasOneTrustSso: 'HasOneTrustSso',
    HasBrevoAccount: 'HasBrevoAccount',
    OwnsAtlassianAccounts: 'OwnsAtlassianAccounts',
    OwnsZoomAccounts: 'OwnsZoomAccounts',
    EmailProtonMail: 'EmailProtonMail',
    SpfAll: 'SpfAll',
    SpfInclude: 'SpfInclude',
    SpfA: 'SpfA',
    SpfMx: 'SpfMx',
    SpfPtr: 'SpfPtr',
    SpfIp: 'SpfIp',
    SpfExists: 'SpfExists',
    SpfRedirect: 'SpfRedirect',
    SpfExplanation: 'SpfExplanation',
    SpfModifier: 'SpfModifier'
} as const;
export type SimpleDnsTxtScanResultTxtTypeEnum = typeof SimpleDnsTxtScanResultTxtTypeEnum[keyof typeof SimpleDnsTxtScanResultTxtTypeEnum];


/**
 * Check if a given object implements the SimpleDnsTxtScanResult interface.
 */
export function instanceOfSimpleDnsTxtScanResult(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "uuid" in value;
    isInstance = isInstance && "attack" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "domain" in value;
    isInstance = isInstance && "rule" in value;
    isInstance = isInstance && "txtType" in value;
    isInstance = isInstance && "spfIp" in value;

    return isInstance;
}

export function SimpleDnsTxtScanResultFromJSON(json: any): SimpleDnsTxtScanResult {
    return SimpleDnsTxtScanResultFromJSONTyped(json, false);
}

export function SimpleDnsTxtScanResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): SimpleDnsTxtScanResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'uuid': json['uuid'],
        'attack': json['attack'],
        'createdAt': (new Date(json['created_at'])),
        'domain': json['domain'],
        'rule': json['rule'],
        'txtType': json['txt_type'],
        'spfIp': json['spf_ip'],
        'spfDomain': !exists(json, 'spf_domain') ? undefined : json['spf_domain'],
        'spfDomainIpv4Cidr': !exists(json, 'spf_domain_ipv4_cidr') ? undefined : json['spf_domain_ipv4_cidr'],
        'spfDomainIpv6Cidr': !exists(json, 'spf_domain_ipv6_cidr') ? undefined : json['spf_domain_ipv6_cidr'],
    };
}

export function SimpleDnsTxtScanResultToJSON(value?: SimpleDnsTxtScanResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'uuid': value.uuid,
        'attack': value.attack,
        'created_at': (value.createdAt.toISOString()),
        'domain': value.domain,
        'rule': value.rule,
        'txt_type': value.txtType,
        'spf_ip': value.spfIp,
        'spf_domain': value.spfDomain,
        'spf_domain_ipv4_cidr': value.spfDomainIpv4Cidr,
        'spf_domain_ipv6_cidr': value.spfDomainIpv6Cidr,
    };
}

