/* tslint:disable */
/* eslint-disable */
/**
 * kraken
 * The core component of kraken-project
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: git@omikron.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AggregationType } from './AggregationType';
import {
    AggregationTypeFromJSON,
    AggregationTypeFromJSONTyped,
    AggregationTypeToJSON,
} from './AggregationType';

/**
 * Workspace tags were updated on an aggregation
 * @export
 * @interface WsMessageOneOf18
 */
export interface WsMessageOneOf18 {
    /**
     * The workspace the aggregation is related to
     * @type {string}
     * @memberof WsMessageOneOf18
     */
    workspace: string;
    /**
     * 
     * @type {AggregationType}
     * @memberof WsMessageOneOf18
     */
    aggregation: AggregationType;
    /**
     * The uuid of the model
     * @type {string}
     * @memberof WsMessageOneOf18
     */
    uuid: string;
    /**
     * The updated list of tags
     * @type {Array<string>}
     * @memberof WsMessageOneOf18
     */
    tags: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof WsMessageOneOf18
     */
    type: WsMessageOneOf18TypeEnum;
}


/**
 * @export
 */
export const WsMessageOneOf18TypeEnum = {
    UpdatedWorkspaceTags: 'UpdatedWorkspaceTags'
} as const;
export type WsMessageOneOf18TypeEnum = typeof WsMessageOneOf18TypeEnum[keyof typeof WsMessageOneOf18TypeEnum];


/**
 * Check if a given object implements the WsMessageOneOf18 interface.
 */
export function instanceOfWsMessageOneOf18(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "workspace" in value;
    isInstance = isInstance && "aggregation" in value;
    isInstance = isInstance && "uuid" in value;
    isInstance = isInstance && "tags" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function WsMessageOneOf18FromJSON(json: any): WsMessageOneOf18 {
    return WsMessageOneOf18FromJSONTyped(json, false);
}

export function WsMessageOneOf18FromJSONTyped(json: any, ignoreDiscriminator: boolean): WsMessageOneOf18 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'workspace': json['workspace'],
        'aggregation': AggregationTypeFromJSON(json['aggregation']),
        'uuid': json['uuid'],
        'tags': json['tags'],
        'type': json['type'],
    };
}

export function WsMessageOneOf18ToJSON(value?: WsMessageOneOf18 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'workspace': value.workspace,
        'aggregation': AggregationTypeToJSON(value.aggregation),
        'uuid': value.uuid,
        'tags': value.tags,
        'type': value.type,
    };
}

